name: release

env:
  PACKAGE_NAME: "throttlekit"
  OWNER: "roudrasekhar"

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo "$TAG_NAME" | awk -F'-' '{print $1}')
            SUFFIX=$(echo "$TAG_NAME" | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
            echo "suffix=$SUFFIX" >> $GITHUB_ENV
            echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo "$response" | jq -r "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ] || [ "$latest_previous_version" == "null" ]; then
            echo "Package not found or no versions. Defaulting to 0.0.0"
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "LATEST_VERSION=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION="${{ needs.details.outputs.new_version }}"
          echo "NEW_VERSION is $NEW_VERSION"
          echo "LATEST_VERSION is $LATEST_VERSION"
          if [ -z "$NEW_VERSION" ]; then
            echo "NEW_VERSION is empty!"
            exit 1
          fi

          if [ "$(printf '%s\n' "$NEW_VERSION" "$LATEST_VERSION" | sort -rV | head -n1)" != "$NEW_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than $LATEST_VERSION."
            exit 1
          else
            echo "New version $NEW_VERSION is valid."
          fi
